Task 6
------
Taken from https://help.github.com/en/articles/changing-a-commit-message
To edit an unpushed commit message, do **git commit --amend**

Task 7
------
The --no-mouse option was added Thu Jan 30 15:41:44 2014 +0900
SHA is c7e86ad4f1061b0cad9f64a6c9ad26f386bc1168

Commit Message:
    Add --no-mouse option to replace FZF_MOUSE_ENABLED

Process:
    Some options I tried:
        git log -S "no-mouse"
        git grep -n "no-mouse"
        git grep -c "no-mouse"
    (Taken from https://git-scm.com/book/en/v2/Git-Tools-Searching)
    Possible issue: 
        I think those search for actual commands or code, but not commit messages.
        I wanted to try to narrow down my options by using -c to count the number of occurrences.

Solution:
    This task was completed with: git grep --log="--no-mouse"
    (Taken from https://mijingo.com/blog/search-git-commits-with-grep)
    I think this works because it incorporates log as the first option.
    Then, the grep parameter (?) does the searching.

Task 8
------
The differences between uncommitted edits and the last commit are revealed by:
    git diff readme.txt
More generally, the command is:
    git diff <file>
    (Taken from http://gitready.com/intermediate/2009/01/30/finding-what-has-been-changed.html)

Task 9
------
First, we will remove mistake.txt from the local repo with:
    rm mistake.txt
Doing git status, we see that the following is not staged for commit.
    deleted:    mistake.txt
We now need to stage this change with:
    git rm mistake.txt
Doing git status, the following will be ready to be committed.
    deleted:    mistake.txt
Now, we simply commit the change and push it into Github. :)

Task 10
-------
Process:
    Some searching gave me the following for reverting changes:
        git revert HEAD~(commit number, where HEAD is the first and latest commit)
    I made an attempt to revert, but then I came across some issues.
    I needed to delete the commit of the revert attempt.
    I decided to start over so I tried deleting the last commit.
    After some searching, this is how to delete a local commit:
        git rebase -I HEAD~(number of commits to delete)
        (Taken from: https://ncona.com/2011/07/how-to-delete-a-commit-in-git-local-and-remote/)
    Once prompted in Vim, I deleted the commit I didn't want.
    To apply the changes to GitHub, I needed to do:
        git push origin +master
        (Taken from: https://ncona.com/2011/07/how-to-delete-a-commit-in-git-local-and-remote/)

Solution:
    Do the following:
        git revert HEAD~(commit number)..HEAD
        (Taken from: http://serebrov.github.io/html/2014-01-04-git-revert-multiple-recent-comments.html)
    This will remove the changes in revert from HEAD~n to HEAD.
    Note that this solution gives one Vim commit message prompt per commit we revert.
    Not sure if I can combine all the individual revert commits into one single commit to push out, but I will try to look for it. 
   